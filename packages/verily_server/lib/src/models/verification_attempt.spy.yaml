# Logs an attempt by a user to complete a specific Action.
class: VerificationAttempt
table: verification_attempt
fields:
  # Link to the Action being attempted.
  # Need to decide if this is a direct relation or just stores the ID.
  # Direct relation might be cleaner for lookups.
  actionId: int, relation(parent=action)
  # Identifier for the user attempting the action.
  # This could be a device ID, anonymous user ID, or potentially linked to UserInfo if the user is signed in.
  userId: String # Consider how to manage anonymous vs logged-in users
  # Current status of the attempt (e.g., "started", "in_progress", "completed_success", "completed_failed", "timed_out").
  # Consider using an Enum later.
  status: String
  # Timestamp when the attempt started.
  startedAt: DateTime
  # Timestamp when the attempt last had activity or was completed/failed.
  lastUpdatedAt: DateTime?
  # JSON encoded string storing the progress/state of individual steps.
  # Example: {"step_1_order": "completed", "step_2_order": "pending", "step_data": {...}}
  stepProgress: String? # JSON map storing step status and potentially collected data
  # Optional: Store any error message if the attempt failed.
  errorMessage: String?

# Define indexes using a map structure.
indexes:
  verification_attempt_action_id_user_id_idx:
    fields: actionId, userId
  verification_attempt_status_idx:
    fields: status
  verification_attempt_started_at_idx:
    fields: startedAt