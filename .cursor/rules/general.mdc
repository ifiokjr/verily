---
description: 
globs: 
alwaysApply: true
---
### üîÑ Project Awareness & Context

- **Always read `setup/requirements/product_requirements.md`, `setup/requirements/technical_requirements.md` and `setup/requirements/ui_requirements.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `setup/tasks/**.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `setup/requirements/**.md`.

### üß± Code Structure & Modularity

- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within flutter packages).

### üß™ Testing & Reliability

- **Always create unit test for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should be placed in the recommended location for the language in use** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case
- **Flutter UI tests** should be created and maintained for new features and apps. 

### ‚úÖ Task Completion

- **Mark completed tasks in `setup/tasks/**.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to the relevant file in `setup/tasks/**.md` under a ‚ÄúDiscovered During Work‚Äù section.

### Conversational Notes

Please do NOT make random guesses on variable names or include paths. Always reference the codebase to see if we have something existing before deciding to randomly make new classes or make up member variable names. DO not hallucinate variable names, feel free to ask if you need context for a file.

SEARCH the codebase for files you need to.

ALWAYS leave LOT of comments and documentation, when refactoring or creating code take the chance to add as many comments as you can, with multi-line, fancy formatting if necessary for explanations. There really should be comments every like 3-6 lines or so, and especially when starting new blocks of code. If you are unsure about names or member variables, feel free to remind me/ask me for full codebase context.. that being said make sure your comments don't make it obvious you are an AI.

If we are designing a UI, try to use Apple's Human Interface Guidelines, let's make something sleek, sexy, modern, and easy to use if we are doing UI stuff, with nice animations too if we can. Really modern and sexy sleek minimal apple style MacOS style UI design, make it sexy, sleek. Animations, UI. Modern, amazing STEVE JOBS LEVEL lets GO! Always reaffirm to me that we are doing it using Apple Guidelines and how we used them in this design (if we are doing UI). When animating, try to use spring animations where possible. Ensure you consider the entire app layout, and how it will work for desktop, tablet, and mobile.

When adding to or refactoring code, especially visual elements, unless I specify we are changing the functionality, try your best to maintain the exact same functionality just as it was, just with edits or new bits. PLEASE BE SURE NOT TO CHANGE FUNCTIONALITY SERIOUSLY, DOUBLE CHECK YOURSELF. Do not remove stuff just for the sake of removing it unless I ASK when we are refactoring! So you don't break things uninentionally.

When doing creative writing, such as app filler text, hero text, calls to action, descriptions, instructions to users, etc:

Write with confidence. No fluff, no filler‚Äîjust direct, no-nonsense communication. Every word should be intentional. Keep it sharp, bold, and a little irreverent, but always clear. Inject wit where it fits, but never at the cost of clarity. Assume the user knows what they‚Äôre doing and just needs the tool to work‚Äîno hand-holding, no corporate nonsense. Speak like a brand that delivers, not one that tries too hard. Straight-up, efficient, and brutally effective. But funny enough to make people laugh when necessary!

When we are debugging, think critically, step by step, consider each possibility, considering and reading each relevant file, and select the most likely resolution, but if we spend a while trying to fix something with no resolution, we should add temporary debug or print statements, and I should copy them to you so you can examine them to understand how the behavior does not align with our goals. Do not suggest the same resolution to a problem if we have previously tried that and it failed, come up with something new.

Do not be afraid to rewrite large swaths of code to fix or consolidate things, but be very careful not to have us backtrack and lose existing functionality, so always consider the functionality of a function, interface, or class, before, and after your changes, and ensure we do not delete anything we previously needed.
